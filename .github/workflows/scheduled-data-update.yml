name: Scheduled Data Update (Every 6 Hours)

on:
  schedule:
    # Run every 6 hours at 00:00, 06:00, 12:00, 18:00 UTC
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if data is fresh'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  actions: write  # Required to trigger other workflows

jobs:
  check-and-trigger:
    runs-on: ubuntu-latest
    outputs:
      needs_update: ${{ steps.staleness_check.outputs.needs_update }}
      update_reason: ${{ steps.staleness_check.outputs.reason }}
      workflow_run_url: ${{ steps.trigger_deploy.outputs.workflow_url }}
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json
      
      - name: 🕐 Check Data Staleness and New External Activity
        id: staleness_check
        env:
          GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
        run: |
          chmod +x .github/workflows/scripts/check-data-staleness.sh
          
          # Run staleness check script and capture output
          SCRIPT_OUTPUT=$(./.github/workflows/scripts/check-data-staleness.sh "${{ github.event.inputs.force_update }}" "$GITHUB_TOKEN")
          
          # Parse script output and set GitHub Actions outputs
          echo "$SCRIPT_OUTPUT" | while IFS= read -r line; do
            case $line in
              needs_update=*)
                echo "$line" >> $GITHUB_OUTPUT
                ;;
              reason=*)
                echo "$line" >> $GITHUB_OUTPUT
                ;;
              external_pr_count=*)
                echo "$line" >> $GITHUB_OUTPUT
                ;;
            esac
          done
      
      - name: 🚀 Trigger Main Production Deployment
        if: steps.staleness_check.outputs.needs_update == 'true'
        id: trigger_deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📋 Triggering main production deployment..."
          
          # Map the update reason to a user-friendly message
          REASON="${{ steps.staleness_check.outputs.reason }}"
          case "$REASON" in
            "new_external_activity")
              UPDATE_MSG="New external pull request activity detected"
              ;;
            "very_stale")
              UPDATE_MSG="Data is very stale (24+ hours old)"
              ;;
            "moderately_stale_no_external")
              UPDATE_MSG="Data is moderately stale with no external activity"
              ;;
            "force_requested")
              UPDATE_MSG="Force update requested via manual trigger"
              ;;
            *)
              UPDATE_MSG="Scheduled staleness check triggered update"
              ;;
          esac
          
          # Trigger the main production deployment workflow
          RESPONSE=$(curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy-main-production.yml/dispatches \
            -d "{\"ref\":\"main\",\"inputs\":{\"trigger_source\":\"scheduled\",\"update_reason\":\"$UPDATE_MSG\"}}" \
            -w "\n%{http_code}" \
            -s)
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n 1)
          
          if [ "$HTTP_CODE" = "204" ]; then
            echo "✅ Successfully triggered main production deployment"
            echo "🔗 Check the Actions tab for the deployment progress"
            
            # Generate the workflow URL (approximate, as we can't get the exact run ID immediately)
            WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/workflows/deploy-main-production.yml"
            echo "workflow_url=$WORKFLOW_URL" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to trigger deployment. HTTP status: $HTTP_CODE"
            echo "Response: $RESPONSE"
            exit 1
          fi
      
      - name: 📊 Update Summary
        run: |
          echo "=== 🕐 SCHEDULED DATA UPDATE SUMMARY ==="
          echo "🕒 Check Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🔄 Trigger: ${{ github.event_name }}"
          echo "📋 Update Needed: ${{ steps.staleness_check.outputs.needs_update }}"
          echo "💡 Reason: ${{ steps.staleness_check.outputs.reason }}"
          
          # Show external activity info if available
          if [ -n "${{ steps.staleness_check.outputs.external_pr_count }}" ]; then
            echo "👥 External PRs Found: ${{ steps.staleness_check.outputs.external_pr_count }}"
          fi
          
          if [ "${{ steps.staleness_check.outputs.needs_update }}" = "true" ]; then
            echo "✅ Update required - triggered main production deployment"
            echo "🚀 Deployment workflow: ${{ steps.trigger_deploy.outputs.workflow_url }}"
            
            case "${{ steps.staleness_check.outputs.reason }}" in
              "new_external_activity")
                echo "🎯 Updating due to new external pull request activity"
                ;;
              "very_stale")
                echo "🔄 Updating due to very stale data (24+ hours)"
                ;;
              "moderately_stale_no_external")
                echo "⏰ Updating due to moderately stale data with no external activity"
                ;;
              "force_requested")
                echo "🔧 Updating due to manual force request"
                ;;
              *)
                echo "🔄 Updating due to other staleness conditions"
                ;;
            esac
          else
            case "${{ steps.staleness_check.outputs.reason }}" in
              "no_external_activity_data_fresh")
                echo "😴 Skipped - no external activity and data is fresh"
                ;;
              "api_error_data_fresh")
                echo "⏭️  Skipped - API error but data is still fresh"
                ;;
              *)
                echo "⏭️  Skipped - data is still fresh"
                ;;
            esac
            echo "🎯 No deployment needed - data is current"
          fi
          
          echo "🚀 Smart scheduled update check completed!"