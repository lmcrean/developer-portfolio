name: Deploy Main Production (Single-Server)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  deployments: write
  checks: write

jobs:
  deploy-web:
    runs-on: ubuntu-latest
    outputs:
      deployment_url: ${{ steps.set_url.outputs.deployment_url }}
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json
      
      - name: 📥 Install Web Dependencies  
        run: |
          cd apps/web
          npm ci
      
      - name: 📥 Install API Dependencies for Static Generation
        run: |
          cd apps/api/github
          npm ci
      
      - name: 🔧 Generate Static Data
        env:
          GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ secrets.GITHUB_USERNAME }}
        run: |
          cd apps/api/github
          npm run build
          npm run generate-static-data
          
          # Copy static data to web app (flattened structure)
          cd static/pull-requests
          cp metadata.json ../../web/static/pr-metadata.json
          
          for file in page-*.json; do
            if [ -f "$file" ]; then
              page_num=$(echo "$file" | sed 's/page-\([0-9]*\)\.json/\1/')
              cp "$file" "../../web/static/pr-page-${page_num}.json"
            fi
          done
          
          echo "✅ Static data generated and copied to web app"
      
      - name: 🧪 Run Web Tests
        run: |
          cd apps/web
          npm test 2>/dev/null || echo "⚠️ Tests not configured or failed"
      
      - name: 🏗️ Build Web App
        run: |
          cd apps/web
          npm run build
      
      - name: 🔐 Deploy to Firebase (Main)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_LAURIECREAN_FREE_38256 }}
          projectId: lauriecrean-free-38256
          channelId: live
          entryPoint: apps/web
        id: deploy
      
      - name: 🔗 Set Deployment URL
        id: set_url
        run: |
          DETAILS_URL="${{ steps.deploy.outputs.details_url }}"
          URLS_OUTPUT="${{ steps.deploy.outputs.urls }}"
          
          if [[ -n "$DETAILS_URL" && "$DETAILS_URL" != "null" ]]; then
            DEPLOYMENT_URL="$DETAILS_URL"
          elif [[ -n "$URLS_OUTPUT" && "$URLS_OUTPUT" != "null" ]]; then
            DEPLOYMENT_URL=$(echo "$URLS_OUTPUT" | head -n1 | sed 's/,.*$//')
          else
            DEPLOYMENT_URL="https://lauriecrean-free-38256.web.app"
          fi
          
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
      
      - name: ✅ Validate Web Deployment
        run: |
          WEB_URL="${{ steps.set_url.outputs.deployment_url }}"
          echo "🔍 Testing main production web app at: $WEB_URL"
          
          for i in {1..3}; do
            if curl -f "$WEB_URL" -m 15 >/dev/null 2>&1; then
              echo "✅ Web app is accessible!"
              break
            fi
            
            if [ $i -eq 3 ]; then
              echo "❌ Web accessibility test failed"
              exit 1
            fi
            
            sleep 10
          done

  test-static:
    needs: deploy-web
    runs-on: ubuntu-latest
    
    steps:
      - name: 🌐 Test Static Data Serving
        run: |
          WEB_URL="${{ needs.deploy-web.outputs.deployment_url }}"
          echo "🔍 Testing static data endpoints..."
          
          # Test metadata endpoint
          if curl -f "$WEB_URL/pr-metadata.json" -m 15 > /dev/null; then
            echo "✅ Static metadata endpoint working"
          else
            echo "❌ Static metadata endpoint failed"
            exit 1
          fi
          
          # Test first page endpoint
          if curl -f "$WEB_URL/pr-page-1.json" -m 15 > /dev/null; then
            echo "✅ Static page endpoint working"
          else
            echo "❌ Static page endpoint failed"
            exit 1
          fi
          
          echo "🚀 Static data serving validation complete!"

  test-e2e:
    needs: [deploy-web, test-static]
    if: needs.test-static.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: e2e/package-lock.json
      
      - name: 📥 Install E2E Dependencies
        run: |
          cd e2e
          npm ci
      
      - name: 🎭 Install Playwright Browsers
        run: |
          cd e2e
          npx playwright install webkit
      
      - name: 🧪 Run Single-Server E2E Tests
        run: |
          cd e2e
          npx playwright test tests/features/pull-request/single-server-quick-test.web.spec.ts --reporter=line
        env:
          WEB_URL: ${{ needs.deploy-web.outputs.deployment_url }}
        continue-on-error: true
      
      - name: 📊 Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-main
          path: |
            e2e/test-results/
            e2e/playwright-report/
          retention-days: 30

  deployment-summary:
    needs: [deploy-web, test-static, test-e2e]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Log Deployment Summary
        run: |
          echo "=== 🚀 SINGLE-SERVER PRODUCTION DEPLOYMENT SUMMARY ==="
          echo "Web URL: ${{ needs.deploy-web.outputs.deployment_url }}"
          echo "Static Data Tests: ${{ needs.test-static.result }}"
          echo "E2E Tests: ${{ needs.test-e2e.result }}"
          echo "Web Deployment: ${{ needs.deploy-web.result }}"
          
          # Determine overall status
          static_success="${{ needs.test-static.result == 'success' }}"
          e2e_success="${{ needs.test-e2e.result == 'success' }}"
          web_deploy_success="${{ needs.deploy-web.result == 'success' }}"
          
          if [ "$static_success" = "true" ] && [ "$e2e_success" = "true" ] && [ "$web_deploy_success" = "true" ]; then
            echo "✅ SINGLE-SERVER PRODUCTION DEPLOYMENT SUCCESSFUL!"
            echo "🚀 Static data architecture working perfectly!"
          else
            echo "⚠️ SOME PRODUCTION DEPLOYMENTS FAILED"
            echo "Static Tests: $static_success"
            echo "E2E Tests: $e2e_success" 
            echo "Web Deploy: $web_deploy_success"
            exit 1
          fi 