name: Deploy Branch Preview (Single-Server)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  deployments: write
  checks: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      deployment_url: ${{ steps.set_url.outputs.deployment_url }}
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json
      
      - name: 🔧 Generate Static Data
        env:
          GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
          GITHUB_USERNAME: lmcrean
        run: |
          chmod +x .github/workflows/scripts/generate-static-data.sh
          ./.github/workflows/scripts/generate-static-data.sh
      
      - name: 📁 Copy Static Data to Web App
        run: |
          chmod +x .github/workflows/scripts/copy-static-data.sh
          ./.github/workflows/scripts/copy-static-data.sh
      
      - name: ✅ Validate Static Data Files
        run: |
          echo "🔍 Validating static data files in web app..."
          
          # Check for metadata file
          if [ ! -f "apps/web/static/pr-metadata.json" ]; then
            echo "❌ Missing pr-metadata.json in web app"
            exit 1
          fi
          
          # Check for page 1 file
          if [ ! -f "apps/web/static/pr-page-1.json" ]; then
            echo "❌ Missing pr-page-1.json in web app"
            exit 1
          fi
          
          # Count total static files
          STATIC_FILES=$(ls apps/web/static/pr-*.json 2>/dev/null | wc -l)
          echo "✅ Found $STATIC_FILES static data files"
          
          # Validate JSON format of metadata
          if ! jq . apps/web/static/pr-metadata.json > /dev/null 2>&1; then
            echo "❌ Invalid JSON format in pr-metadata.json"
            exit 1
          fi
          
          echo "✅ Static data validation complete"
      
      - name: 🏗️ Prepare Web App
        run: |
          chmod +x .github/workflows/scripts/deploy-web.sh
          ./.github/workflows/scripts/deploy-web.sh branch ${{ github.event.number }}
      
      - name: 🔐 Deploy to Firebase (Branch Preview)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_LAURIECREAN_FREE_38256 }}
          projectId: lauriecrean-free-38256
          channelId: branch-${{ github.event.number }}
          entryPoint: apps/web
        id: deploy
      
      - name: 🔗 Set Deployment URL
        id: set_url
        run: |
          # Try to get the actual Firebase app URL instead of GitHub's details page
          if [ -n "${{ steps.deploy.outputs.url }}" ]; then
            DEPLOYMENT_URL="${{ steps.deploy.outputs.url }}"
            echo "🌐 Using Firebase app URL: $DEPLOYMENT_URL"
          elif [ -n "${{ steps.deploy.outputs.details_url }}" ]; then
            DEPLOYMENT_URL="${{ steps.deploy.outputs.details_url }}"
            echo "🌐 Using fallback details URL: $DEPLOYMENT_URL"
          else
            # Construct Firebase preview URL as last resort
            DEPLOYMENT_URL="https://lauriecrean-free-38256--branch-${{ github.event.number }}-$(date +%s | tail -c 6).web.app"
            echo "⚠️ Constructing Firebase URL: $DEPLOYMENT_URL"
          fi
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
      
      - name: ⏳ Wait for Firebase Deployment
        run: |
          echo "⏳ Waiting for Firebase to fully provision the preview deployment..."
          sleep 45
          echo "✅ Deployment wait complete"
      
      - name: 🌐 Test Static Data
        run: |
          chmod +x .github/workflows/scripts/test-static-data.sh
          ./.github/workflows/scripts/test-static-data.sh "${{ steps.set_url.outputs.deployment_url }}"
      
      - name: 🧪 Run E2E Tests
        run: |
          chmod +x .github/workflows/scripts/run-e2e-tests.sh
          ./.github/workflows/scripts/run-e2e-tests.sh "${{ steps.set_url.outputs.deployment_url }}"
        continue-on-error: true
      
      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-pr-${{ github.event.number }}
          path: |
            e2e/test-results/
            e2e/playwright-report/
          retention-days: 30
      
      - name: 💬 Update PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const webUrl = '${{ steps.set_url.outputs.deployment_url }}';
            const webStatus = '${{ job.status }}';
            
            const statusEmoji = webStatus === 'success' ? '✅' : '⚠️';
            const statusText = webStatus === 'success' ? 'Deployment successful!' : 'Deployment completed with issues';
            
            const commentBody = `## 🚀 SINGLE-SERVER DEPLOYMENT

            ### 🌐 Web App with Embedded Static Data
            **Live Preview:** [${webUrl}](${webUrl})

            ### 🧪 Quick Test Links
            - [📱 Web App](${webUrl}) - Test the user interface
            - [📊 Static Data](${webUrl}/pr-metadata.json) - Verify static data serving
            - [🔗 Click here to test!](${webUrl})

            ### ⚡ Performance Features
            - **Sub-second loading** with embedded static data
            - **No API server dependency** - single-server architecture
            - **Same-origin requests** for optimal performance
            - **Automatic fallback** to live GitHub API if needed

            ${statusEmoji} ${statusText}

            ---
            *🔄 Last updated: ${new Date().toLocaleString()} UTC*
            
            <!-- BRANCH_DEPLOYMENT_COMMENT -->`;

            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(comment => 
              comment.body.includes('<!-- BRANCH_DEPLOYMENT_COMMENT -->')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }